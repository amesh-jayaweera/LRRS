/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Databse.Database;
import Enums.RoomType;
import Model.User;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hiruni CH
 */
public class Reservation extends javax.swing.JFrame {

    /**
     * Creates new form Reservation
     */
    
    
    private Connection connection;
    
    private User user;
    
    static DefaultTableModel tableRooms;
    
    private Date dateStart;
    private Date dateEnd;
    
    private int roomNo;
    private int reservationNo;
    
    private String type;
    
    
    public Reservation() {
        initComponents();
        this.setResizable(false); 
        this.setLocationRelativeTo(null);
    }
    
    
    public Reservation(User user,String type) {
        initComponents();
        this.setResizable(false); 
        this.setLocationRelativeTo(null);
        this.user = user;
        this.type = type;
        connection = Database.openConnection();
        tableRooms = (DefaultTableModel) table_rooms.getModel();
        
          
    }
    
    public void updateUI(String dateTimeStart,String dateTimeEnd,int reservationNo,int roomNo,String hallType){
        
        

        System.out.println(dateTimeStart + " " + dateTimeEnd);
        
        SimpleDateFormat formater = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        
        try {
            dateStart = formater.parse(dateTimeStart);
            dateEnd = formater.parse(dateTimeEnd);
            this.roomNo = roomNo;
            this.reservationNo = reservationNo;
            
            
            jDateChooser1.setDate(dateStart);
      
            
            cmb_hour_start.setSelectedItem(dateTimeStart.split(" ")[1].split(":")[0]);
            cmb_minites_start.setSelectedItem(dateTimeStart.split(" ")[1].split(":")[1]);
            cmb_hour_end.setSelectedItem(dateTimeEnd.split(" ")[1].split(":")[0]);
            cmb_minites_end.setSelectedItem(dateTimeEnd.split(" ")[1].split(":")[1]);
            
            
            
        } catch (ParseException ex) {
            Logger.getLogger(Reservation.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
    
  
    
    public static void setRowCountZero(){
        tableRooms.setRowCount(0);
    }
    
    private void showError(String msg){
        JOptionPane.showMessageDialog(this, msg, "ERROR", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        cmb_hour_start = new javax.swing.JComboBox<>();
        cmb_minites_start = new javax.swing.JComboBox<>();
        btn_show_availability = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cmb_hour_end = new javax.swing.JComboBox<>();
        cmb_minites_end = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_rooms = new javax.swing.JTable();
        btn_reserve = new javax.swing.JButton();
        btn_cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 0, 0));

        jPanel1.setBackground(new java.awt.Color(51, 0, 0));

        jLabel1.setBackground(new java.awt.Color(51, 0, 0));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 204));
        jLabel1.setText("Please enter the date and time to get available halls");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 204));
        jLabel2.setText("Date");

        jDateChooser1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 204));
        jLabel3.setText("End");

        cmb_hour_start.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmb_hour_start.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "2p", "21", "22", "23" }));

        cmb_minites_start.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmb_minites_start.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        btn_show_availability.setBackground(java.awt.Color.blue);
        btn_show_availability.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn_show_availability.setForeground(java.awt.Color.white);
        btn_show_availability.setText("Go to list");
        btn_show_availability.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.lightGray, null, java.awt.Color.white));
        btn_show_availability.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_show_availabilityActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 204));
        jLabel5.setText("Start");

        cmb_hour_end.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmb_hour_end.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "2p", "21", "22", "23" }));

        cmb_minites_end.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        cmb_minites_end.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(4, 4, 4)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel5)
                        .addGap(4, 4, 4)
                        .addComponent(cmb_hour_start, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_minites_start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_hour_end, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_minites_end, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_show_availability, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btn_show_availability)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(cmb_hour_start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmb_minites_start, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)
                        .addComponent(cmb_hour_end, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmb_minites_end, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(408, 408, 408))
        );

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(51, 0, 0));
        jLabel4.setText("Click on the code of required hall to reserve the hall");

        table_rooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Hall Type", "Hall Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_rooms);

        btn_reserve.setBackground(new java.awt.Color(0, 100, 0));
        btn_reserve.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn_reserve.setForeground(java.awt.Color.white);
        btn_reserve.setText("Reserve");
        btn_reserve.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.lightGray, null, java.awt.Color.white));
        btn_reserve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_reserveActionPerformed(evt);
            }
        });

        btn_cancel.setBackground(java.awt.Color.red);
        btn_cancel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn_cancel.setForeground(java.awt.Color.white);
        btn_cancel.setText("Cancel");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btn_cancel)
                                .addGap(470, 470, 470)
                                .addComponent(btn_reserve, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_reserve)
                    .addComponent(btn_cancel))
                .addGap(4, 4, 4))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_show_availabilityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_show_availabilityActionPerformed
        // TODO add your handling code here:

        setRowCountZero();
         dateStart = jDateChooser1.getDate();
        
        if(dateStart == null){
            showError("Please choose a date and time");
        }else if(Integer.parseInt(cmb_hour_start.getSelectedItem().toString().trim()) > Integer.parseInt(cmb_hour_end.getSelectedItem().toString().trim())){
          
            showError("Please choose a valid time period");
        }else {
            SimpleDateFormat formater = new SimpleDateFormat("MM/dd/yyyy");
            String dateStringStart = formater.format(dateStart);
            String dateStringEnd = formater.format(dateStart);
            dateStringStart = dateStringStart + " " + cmb_hour_start.getSelectedItem().toString().trim() + ":" + cmb_minites_start.getSelectedItem().toString().trim();
            dateStringEnd = dateStringEnd + " " + cmb_hour_end.getSelectedItem().toString().trim() + ":" + cmb_minites_end.getSelectedItem().toString().trim();

            formater = new SimpleDateFormat("MM/dd/yyyy HH:mm");
            try {
                dateStart = formater.parse(dateStringStart);
                dateEnd = formater.parse(dateStringEnd);
                System.out.println(dateStart);
                System.out.println(dateEnd);
                
                
               

                try {
                    PreparedStatement statement = connection.prepareStatement("SELECT * FROM reservation WHERE (Date_time_start <= STR_TO_DATE(?, '%Y-%m-%d %H:%i:%s') AND Date_time_end >= STR_TO_DATE(?, '%Y-%m-%d %H:%i:%s')) OR (Date_time_start <= STR_TO_DATE(?, '%Y-%m-%d %H:%i:%s') AND Date_time_end >= STR_TO_DATE(?, '%Y-%m-%d %H:%i:%s')) OR (Date_time_start > STR_TO_DATE(?, '%Y-%m-%d %H:%i:%s') AND Date_time_end < STR_TO_DATE(?, '%Y-%m-%d %H:%i:%s'))");
                   SimpleDateFormat formatterSQL =  new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    statement.setString(1, formatterSQL.format(dateStart));
                    statement.setString(2, formatterSQL.format(dateStart));
                    statement.setString(3,formatterSQL.format(dateEnd) );
                    statement.setString(4, formatterSQL.format(dateEnd));
                    statement.setString(5,formatterSQL.format(dateStart) );
                    statement.setString(6, formatterSQL.format(dateEnd));
                    
                    System.out.println(formatterSQL.format(dateStart));
                    System.out.println(formatterSQL.format(dateEnd));
                    
                    //PreparedStatement statement = connection.prepareStatement("SELECT * FROM room");
                    ResultSet resultSet = statement.executeQuery();
                    
                    
                    ArrayList<String> bookedList = new ArrayList<>();
                    while(resultSet.next()){
                        if(!bookedList.contains(resultSet.getString(1)))
                        {
                            bookedList.add(resultSet.getString(1));
                        }
                    }
                    
                    statement = connection.prepareStatement("SELECT * FROM room");
                    resultSet = statement.executeQuery();
                    
                       while(resultSet.next()){
                           
                           if(!bookedList.contains(resultSet.getString(1))){
                               String roomType = "";
                            if(null == RoomType.valueOf(resultSet.getString(2))){

                            }else switch (RoomType.valueOf(resultSet.getString(2))) {
                                 case LECTURE_ROOM:
                                     roomType = "Lecture Room";

                                     break;
                                 case MEETING_ROOM:
                                     roomType = "Meeting Room";

                                     break;
                                 default:
                                     roomType = "Study Area";

                                     break;
                             }
                             tableRooms.addRow(new Object[]{roomType,resultSet.getString(1)});
                           }           
            }
                       
                       
                       if(tableRooms.getRowCount() == 0){
                           showError("There is no availble rooms");
                       }
                       
                
                } catch (SQLException ex) {
                    Logger.getLogger(Reservation.class.getName()).log(Level.SEVERE, null, ex);
                }
                

            } catch (ParseException ex) {
                Logger.getLogger(Reservation.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
       
        

        
       
    }//GEN-LAST:event_btn_show_availabilityActionPerformed

    private void btn_reserveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_reserveActionPerformed
        // TODO add your handling code here:
        
        
        
         if (table_rooms.getRowCount() != 0) {
            if (table_rooms.getSelectedRow() == -1) {
                showError("Please Select a Row");
            } else {
                String roomID = String.valueOf(table_rooms.getModel().getValueAt(table_rooms.getSelectedRow(), 1));
                String roomTypeStr = String.valueOf(table_rooms.getModel().getValueAt(table_rooms.getSelectedRow(), 0));
                
                RoomType roomType;
                
                switch (roomTypeStr) {
                    case "Lecture Room":
                        roomType = RoomType.LECTURE_ROOM;
                        break;
                    case "Meeting Room":
                       roomType = RoomType.MEETING_ROOM;
                        break;
                    default:
                        roomType = RoomType.STUDY_AREA;
                        break;
                }
                
                
             
                
                Show_room_details obj = new Show_room_details(user,roomID,roomType,dateStart,dateEnd,type); 
                
                
                if(type.equals("UPDATE")){
                    obj.setReservationID(reservationNo);
                }
          
                
                obj.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                obj.setVisible(true);
                
            }
        } else {
            JOptionPane.showMessageDialog(this, "No Records Available to Update", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_reserveActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btn_cancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reservation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton btn_reserve;
    private javax.swing.JButton btn_show_availability;
    private javax.swing.JComboBox<String> cmb_hour_end;
    private javax.swing.JComboBox<String> cmb_hour_start;
    private javax.swing.JComboBox<String> cmb_minites_end;
    private javax.swing.JComboBox<String> cmb_minites_start;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_rooms;
    // End of variables declaration//GEN-END:variables
}
