/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Databse.Database;
import Enums.RoomType;
import Enums.Status;
import Model.User;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hiruni CH
 */
public class Admin_comfirmation extends javax.swing.JFrame {

    /**
     * Creates new form AdminComfirmation
     */
    
    
    private User user;
    private static ResultSet resultSet,resultSet1;
    
    private static Connection connection;
    private static PreparedStatement statement;
    
    static DefaultTableModel tableRooms;
    
     public Admin_comfirmation() {
        initComponents();
        this.setResizable(false); 
        this.setLocationRelativeTo(null);
        this.user = user;
    }
    
    public Admin_comfirmation(User user) {
        initComponents();
        this.setResizable(false); 
        this.setLocationRelativeTo(null);
        this.user = user;
        
        tableRooms = (DefaultTableModel)table_pendingList.getModel();
         
        connection = Database.openConnection();
       
        updateTable();
        
        
    }
    
     private void showError(String msg){
        JOptionPane.showMessageDialog(this, msg, "ERROR", JOptionPane.ERROR_MESSAGE);
    }
     
     
     public static void updateTable(){
         tableRooms.setRowCount(0);
          try {
            statement = connection.prepareStatement("SELECT * FROM reservation WHERE Status='PENDING'");
            resultSet = statement.executeQuery();
            
            while(resultSet.next()){
                
                statement = connection.prepareStatement("SELECT * FROM room WHERE Room_id=?");
                statement.setString(1, resultSet.getString(7));
                resultSet1 = statement.executeQuery();
                
                if(resultSet1.next()){
                    tableRooms.addRow(new Object[]{resultSet.getString(1),resultSet.getString(3),resultSet.getString(8),resultSet.getString(7),resultSet1.getString(2),resultSet.getString(5)});
                }
                
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(Admin_comfirmation.class.getName()).log(Level.SEVERE, null, ex);
        }
     }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_pendingList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btn_reject = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btn_comfirm = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 0, 0));

        table_pendingList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Reservation No", "Start Time", "End Time", "Hall Code", "Hall Type", "Reservered By"
            }
        ));
        jScrollPane1.setViewportView(table_pendingList);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 204));
        jLabel1.setText("Pending Reservations");

        btn_reject.setBackground(java.awt.Color.red);
        btn_reject.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn_reject.setForeground(java.awt.Color.white);
        btn_reject.setText("Reject Reservation");
        btn_reject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_rejectActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 204));
        jLabel2.setText("Select  desired row and click on \"Comfirm Reservation\" to comfirm the reservation, otherwise click on \"Reject Reservation\"");

        btn_comfirm.setBackground(new java.awt.Color(0, 100, 0));
        btn_comfirm.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn_comfirm.setForeground(java.awt.Color.white);
        btn_comfirm.setText("Comfim Reservation");
        btn_comfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_comfirmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1023, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btn_comfirm)
                            .addGap(18, 18, 18)
                            .addComponent(btn_reject))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 969, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(68, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_reject)
                    .addComponent(btn_comfirm))
                .addGap(25, 25, 25))
        );

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_comfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_comfirmActionPerformed
        // TODO add your handling code here:
        
         if (table_pendingList.getRowCount() != 0) {
            if (table_pendingList.getSelectedRow() == -1) {
                showError("Please Select a Row");
            } else {
               
                String reservationID = String.valueOf(table_pendingList.getModel().getValueAt(table_pendingList.getSelectedRow(), 0));
                
                 AssignNonAcademicPerson obj = new AssignNonAcademicPerson(reservationID);
                 obj.setVisible(true);
                
//                
//                
                
            }
        } else {
            JOptionPane.showMessageDialog(this, "No Records Available to Update", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btn_comfirmActionPerformed

    private void btn_rejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_rejectActionPerformed
        // TODO add your handling code here:
        if (table_pendingList.getRowCount() != 0) {
            if (table_pendingList.getSelectedRow() == -1) {
                showError("Please Select a Row");
            } else {
               
                String reservationID = String.valueOf(table_pendingList.getModel().getValueAt(table_pendingList.getSelectedRow(), 0));
                
                try {
                    statement = connection.prepareStatement("UPDATE reservation SET Status=? WHERE Reservation_number=?");
                    statement.setString(1, Status.REJECTED.toString());
                    statement.setString(2, reservationID);
                    int res = statement.executeUpdate();
                    
                    if(res == 1){
                        JOptionPane.showMessageDialog(this, "Reservation Rejected", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                        updateTable();
                    }else {
                        showError("Reservation failed");
                    }
                    
                
                } catch (SQLException ex) {
                    Logger.getLogger(Admin_comfirmation.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
            }
        } else {
            JOptionPane.showMessageDialog(this, "No Records Available to Update", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btn_rejectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_comfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_comfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_comfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_comfirmation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin_comfirmation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_comfirm;
    private javax.swing.JButton btn_reject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_pendingList;
    // End of variables declaration//GEN-END:variables
}
