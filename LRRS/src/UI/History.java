/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Databse.Database;
import Model.User;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hiruni CH
 */
public class History extends javax.swing.JFrame {

    /**
     * Creates new form Admin_history
     */
    
    
    
    private User user;
    
    private Connection connection;
    private PreparedStatement statement;
    
    

    
     DefaultTableModel tableHistory;
    
    
    public History() {
        initComponents();
        this.setResizable(false); 
        this.setLocationRelativeTo(null);
    }

    
    public History(User user) {
        initComponents();
        this.setResizable(false); 
        this.setLocationRelativeTo(null);
        this.user = user;
        
        
       tableHistory = (DefaultTableModel) table_history.getModel();
        connection = Database.openConnection();
        
        
        
        switch(user.getUser_type()){
            case STUDENT:
        {
            try {
                statement = connection.prepareStatement("SELECT * FROM reservation WHERE Reserved_person_id=?");
                statement.setString(1, user.getId_number());
            } catch (SQLException ex) {
                Logger.getLogger(History.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
                break;
            case STAFF:
       {
            try {
                statement = connection.prepareStatement("SELECT * FROM reservation WHERE Reserved_person_id=?");
                statement.setString(1, user.getId_number());
            } catch (SQLException ex) {
                Logger.getLogger(History.class.getName()).log(Level.SEVERE, null, ex);
            }
             break;
        }
            case NON_ACADEMIC:
        {
            try {
                statement = connection.prepareStatement("SELECT * FROM reservation WHERE Non_academic_id=?");
                statement.setString(1, user.getId_number());
            } catch (SQLException ex) {
                Logger.getLogger(History.class.getName()).log(Level.SEVERE, null, ex);
            }
             break;
        }
            default:
         {
            try {
                statement = connection.prepareStatement("SELECT * FROM reservation");
            } catch (SQLException ex) {
                Logger.getLogger(History.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        }
        
        
        try{
            
            ResultSet resultSet  = statement.executeQuery();
        
        while(resultSet.next()){
            
            
            statement = connection.prepareStatement("SELECT * FROM room WHERE Room_id=?");
                statement.setString(1, resultSet.getString(7));
                ResultSet resultSet1 = statement.executeQuery();
                
                if(resultSet1.next()){
                    tableHistory.addRow(new Object[]{resultSet.getString(1),resultSet.getString(7),resultSet.getString(3),resultSet.getString(8),resultSet.getString(2),resultSet1.getString(2)});
                }
            
            
            
        
        }
            
        }catch (SQLException ex) {
                Logger.getLogger(History.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
    }
    
      private void showError(String msg){
        JOptionPane.showMessageDialog(this, msg, "ERROR", JOptionPane.ERROR_MESSAGE);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_history = new javax.swing.JTable();
        btn_update = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 51));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setText("Reservation History");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addContainerGap(493, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        table_history.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Reservation No", "Hall ID", "Start Time", "End Time", "Status", "Hall Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_history);

        btn_update.setBackground(new java.awt.Color(0, 100, 0));
        btn_update.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn_update.setForeground(java.awt.Color.white);
        btn_update.setText("Update");
        btn_update.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.lightGray, null, java.awt.Color.white));
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_delete.setBackground(java.awt.Color.red);
        btn_delete.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btn_delete.setForeground(java.awt.Color.white);
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_update)
                    .addComponent(btn_delete))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        // TODO add your handling code here:
        
         if(table_history.getRowCount() > 0){
            if(table_history.getSelectedRow() == -1){
                showError("Please select a row to update");
            }else{
                String status = table_history.getModel().getValueAt(table_history.getSelectedRow(),4).toString();
                System.out.println(status);
                if(status.equals("PENDING")){
//                    try {
//                        statement = connection.prepareStatement("DELETE FROM reservation WHERE Reservation_number=?");
//                        statement.setString(1, table_history.getModel().getValueAt(table_history.getSelectedRow(),0).toString());
//                        int res = statement.executeUpdate();
//                        if(res == -1){
//                            showError("Could not be updated");
//                        }else{
//                             JOptionPane.showMessageDialog(this, "Deleted Successfully", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
//                             ((DefaultTableModel)table_history.getModel()).removeRow(table_history.getSelectedRow());
//                        }
//                    
//                    } catch (SQLException ex) {
//                        Logger.getLogger(History.class.getName()).log(Level.SEVERE, null, ex);
//                    }



                        int row = table_history.getSelectedRow();
                        Reservation obj = new Reservation(user,"UPDATE");
//                        obj.updateUI(table_history.getModel().getValueAt(table_history.getSelectedRow(),2).toString() 
//                                , table_history.getModel().getValueAt(table_history.getSelectedRow(),3).toString()
//                                ,Integer.parseInt(table_history.getModel().getValueAt(table_history.getSelectedRow(),0).toString()) 
//                                ,Integer.parseInt(table_history.getModel().getValueAt(table_history.getSelectedRow(),1).toString())
                       
            obj.updateUI(table_history.getModel().getValueAt(row,2).toString(), table_history.getModel().getValueAt(row,3).toString(), Integer.parseInt(table_history.getModel().getValueAt(row,0).toString()), Integer.parseInt(table_history.getModel().getValueAt(row,1).toString()), table_history.getModel().getValueAt(row,5).toString());
obj.setVisible(true);

                }else {
                   showError("This record cannot be updated");
                }
                
            }
        }else{
            showError("There is no records to update");
        }
       
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        
        if(table_history.getRowCount() > 0){
            if(table_history.getSelectedRow() == -1){
                showError("Please select a row to delete");
            }else{
                String status = table_history.getModel().getValueAt(table_history.getSelectedRow(),4).toString();
                System.out.println(status);
                if(status.equals("PENDING")){
                    try {
                        statement = connection.prepareStatement("DELETE FROM reservation WHERE Reservation_number=?");
                        statement.setString(1, table_history.getModel().getValueAt(table_history.getSelectedRow(),0).toString());
                        int res = statement.executeUpdate();
                        if(res == -1){
                            showError("Could not be updated");
                        }else{
                             JOptionPane.showMessageDialog(this, "Deleted Successfully", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                             ((DefaultTableModel)table_history.getModel()).removeRow(table_history.getSelectedRow());
                        }
                    
                    } catch (SQLException ex) {
                        Logger.getLogger(History.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }else {
                   showError("This record cannot be deleted");
                }
                
            }
        }else{
            showError("There is no records to delete");
        }
        
    }//GEN-LAST:event_btn_deleteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(History.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new History().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table_history;
    // End of variables declaration//GEN-END:variables
}
